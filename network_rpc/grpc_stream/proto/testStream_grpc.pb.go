// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0
// source: testStream.proto

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StreamC_ClientStream_FullMethodName = "/StreamC/ClientStream"
	StreamC_ServerStream_FullMethodName = "/StreamC/ServerStream"
	StreamC_DoubleStream_FullMethodName = "/StreamC/DoubleStream"
)

// StreamCClient is the client API for StreamC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamCClient interface {
	//客户端流式rpc
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (StreamC_ClientStreamClient, error)
	//服务端流式rpc
	ServerStream(ctx context.Context, in *StreamReq, opts ...grpc.CallOption) (StreamC_ServerStreamClient, error)
	//客户端和服务端均流式rpc
	DoubleStream(ctx context.Context, opts ...grpc.CallOption) (StreamC_DoubleStreamClient, error)
}

type streamCClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamCClient(cc grpc.ClientConnInterface) StreamCClient {
	return &streamCClient{cc}
}

func (c *streamCClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (StreamC_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamC_ServiceDesc.Streams[0], StreamC_ClientStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamCClientStreamClient{stream}
	return x, nil
}

type StreamC_ClientStreamClient interface {
	Send(*StreamReq) error
	CloseAndRecv() (*StreamResp, error)
	grpc.ClientStream
}

type streamCClientStreamClient struct {
	grpc.ClientStream
}

func (x *streamCClientStreamClient) Send(m *StreamReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamCClientStreamClient) CloseAndRecv() (*StreamResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamCClient) ServerStream(ctx context.Context, in *StreamReq, opts ...grpc.CallOption) (StreamC_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamC_ServiceDesc.Streams[1], StreamC_ServerStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamCServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamC_ServerStreamClient interface {
	Recv() (*StreamResp, error)
	grpc.ClientStream
}

type streamCServerStreamClient struct {
	grpc.ClientStream
}

func (x *streamCServerStreamClient) Recv() (*StreamResp, error) {
	m := new(StreamResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamCClient) DoubleStream(ctx context.Context, opts ...grpc.CallOption) (StreamC_DoubleStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamC_ServiceDesc.Streams[2], StreamC_DoubleStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamCDoubleStreamClient{stream}
	return x, nil
}

type StreamC_DoubleStreamClient interface {
	Send(*StreamReq) error
	Recv() (*StreamResp, error)
	grpc.ClientStream
}

type streamCDoubleStreamClient struct {
	grpc.ClientStream
}

func (x *streamCDoubleStreamClient) Send(m *StreamReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamCDoubleStreamClient) Recv() (*StreamResp, error) {
	m := new(StreamResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamCServer is the server API for StreamC service.
// All implementations must embed UnimplementedStreamCServer
// for forward compatibility
type StreamCServer interface {
	//客户端流式rpc
	ClientStream(StreamC_ClientStreamServer) error
	//服务端流式rpc
	ServerStream(*StreamReq, StreamC_ServerStreamServer) error
	//客户端和服务端均流式rpc
	DoubleStream(StreamC_DoubleStreamServer) error
	mustEmbedUnimplementedStreamCServer()
}

// UnimplementedStreamCServer must be embedded to have forward compatible implementations.
type UnimplementedStreamCServer struct {
}

func (UnimplementedStreamCServer) ClientStream(StreamC_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedStreamCServer) ServerStream(*StreamReq, StreamC_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedStreamCServer) DoubleStream(StreamC_DoubleStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DoubleStream not implemented")
}
func (UnimplementedStreamCServer) mustEmbedUnimplementedStreamCServer() {}

// UnsafeStreamCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamCServer will
// result in compilation errors.
type UnsafeStreamCServer interface {
	mustEmbedUnimplementedStreamCServer()
}

func RegisterStreamCServer(s grpc.ServiceRegistrar, srv StreamCServer) {
	s.RegisterService(&StreamC_ServiceDesc, srv)
}

func _StreamC_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamCServer).ClientStream(&streamCClientStreamServer{stream})
}

type StreamC_ClientStreamServer interface {
	SendAndClose(*StreamResp) error
	Recv() (*StreamReq, error)
	grpc.ServerStream
}

type streamCClientStreamServer struct {
	grpc.ServerStream
}

func (x *streamCClientStreamServer) SendAndClose(m *StreamResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamCClientStreamServer) Recv() (*StreamReq, error) {
	m := new(StreamReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StreamC_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamCServer).ServerStream(m, &streamCServerStreamServer{stream})
}

type StreamC_ServerStreamServer interface {
	Send(*StreamResp) error
	grpc.ServerStream
}

type streamCServerStreamServer struct {
	grpc.ServerStream
}

func (x *streamCServerStreamServer) Send(m *StreamResp) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamC_DoubleStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamCServer).DoubleStream(&streamCDoubleStreamServer{stream})
}

type StreamC_DoubleStreamServer interface {
	Send(*StreamResp) error
	Recv() (*StreamReq, error)
	grpc.ServerStream
}

type streamCDoubleStreamServer struct {
	grpc.ServerStream
}

func (x *streamCDoubleStreamServer) Send(m *StreamResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamCDoubleStreamServer) Recv() (*StreamReq, error) {
	m := new(StreamReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamC_ServiceDesc is the grpc.ServiceDesc for StreamC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StreamC",
	HandlerType: (*StreamCServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStream",
			Handler:       _StreamC_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStream",
			Handler:       _StreamC_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DoubleStream",
			Handler:       _StreamC_DoubleStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "testStream.proto",
}
