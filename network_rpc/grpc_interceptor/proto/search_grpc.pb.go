// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0
// source: search.proto

package grpc_interceptor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SearchV_SayHi_FullMethodName    = "/SearchV/SayHi"
	SearchV_SayHello_FullMethodName = "/SearchV/SayHello"
)

// SearchVClient is the client API for SearchV service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearchVClient interface {
	SayHi(ctx context.Context, opts ...grpc.CallOption) (SearchV_SayHiClient, error)
	SayHello(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
}

type searchVClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchVClient(cc grpc.ClientConnInterface) SearchVClient {
	return &searchVClient{cc}
}

func (c *searchVClient) SayHi(ctx context.Context, opts ...grpc.CallOption) (SearchV_SayHiClient, error) {
	stream, err := c.cc.NewStream(ctx, &SearchV_ServiceDesc.Streams[0], SearchV_SayHi_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &searchVSayHiClient{stream}
	return x, nil
}

type SearchV_SayHiClient interface {
	Send(*Req) error
	Recv() (*Resp, error)
	grpc.ClientStream
}

type searchVSayHiClient struct {
	grpc.ClientStream
}

func (x *searchVSayHiClient) Send(m *Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *searchVSayHiClient) Recv() (*Resp, error) {
	m := new(Resp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *searchVClient) SayHello(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, SearchV_SayHello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchVServer is the server API for SearchV service.
// All implementations must embed UnimplementedSearchVServer
// for forward compatibility
type SearchVServer interface {
	SayHi(SearchV_SayHiServer) error
	SayHello(context.Context, *Req) (*Resp, error)
	mustEmbedUnimplementedSearchVServer()
}

// UnimplementedSearchVServer must be embedded to have forward compatible implementations.
type UnimplementedSearchVServer struct {
}

func (UnimplementedSearchVServer) SayHi(SearchV_SayHiServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHi not implemented")
}
func (UnimplementedSearchVServer) SayHello(context.Context, *Req) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedSearchVServer) mustEmbedUnimplementedSearchVServer() {}

// UnsafeSearchVServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchVServer will
// result in compilation errors.
type UnsafeSearchVServer interface {
	mustEmbedUnimplementedSearchVServer()
}

func RegisterSearchVServer(s grpc.ServiceRegistrar, srv SearchVServer) {
	s.RegisterService(&SearchV_ServiceDesc, srv)
}

func _SearchV_SayHi_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SearchVServer).SayHi(&searchVSayHiServer{stream})
}

type SearchV_SayHiServer interface {
	Send(*Resp) error
	Recv() (*Req, error)
	grpc.ServerStream
}

type searchVSayHiServer struct {
	grpc.ServerStream
}

func (x *searchVSayHiServer) Send(m *Resp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *searchVSayHiServer) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SearchV_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchVServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchV_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchVServer).SayHello(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

// SearchV_ServiceDesc is the grpc.ServiceDesc for SearchV service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SearchV_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SearchV",
	HandlerType: (*SearchVServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _SearchV_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHi",
			Handler:       _SearchV_SayHi_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "search.proto",
}
