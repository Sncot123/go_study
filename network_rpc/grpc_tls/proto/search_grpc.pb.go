// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0
// source: search.proto

package grpc_tls

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SearchC_Search_FullMethodName = "/SearchC/Search"
)

// SearchCClient is the client API for SearchC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearchCClient interface {
	Search(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
}

type searchCClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchCClient(cc grpc.ClientConnInterface) SearchCClient {
	return &searchCClient{cc}
}

func (c *searchCClient) Search(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, SearchC_Search_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchCServer is the server API for SearchC service.
// All implementations must embed UnimplementedSearchCServer
// for forward compatibility
type SearchCServer interface {
	Search(context.Context, *Req) (*Resp, error)
	mustEmbedUnimplementedSearchCServer()
}

// UnimplementedSearchCServer must be embedded to have forward compatible implementations.
type UnimplementedSearchCServer struct {
}

func (UnimplementedSearchCServer) Search(context.Context, *Req) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedSearchCServer) mustEmbedUnimplementedSearchCServer() {}

// UnsafeSearchCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchCServer will
// result in compilation errors.
type UnsafeSearchCServer interface {
	mustEmbedUnimplementedSearchCServer()
}

func RegisterSearchCServer(s grpc.ServiceRegistrar, srv SearchCServer) {
	s.RegisterService(&SearchC_ServiceDesc, srv)
}

func _SearchC_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchCServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchC_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchCServer).Search(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

// SearchC_ServiceDesc is the grpc.ServiceDesc for SearchC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SearchC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SearchC",
	HandlerType: (*SearchCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _SearchC_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "search.proto",
}
