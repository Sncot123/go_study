// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: nuts/echo/v1/echo.proto

package echov1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EchoService_Echo_FullMethodName       = "/nuts.echo.v1.EchoService/Echo"
	EchoService_EchoBody_FullMethodName   = "/nuts.echo.v1.EchoService/EchoBody"
	EchoService_EchoHeader_FullMethodName = "/nuts.echo.v1.EchoService/EchoHeader"
	EchoService_EchoUpload_FullMethodName = "/nuts.echo.v1.EchoService/EchoUpload"
)

// EchoServiceClient is the client API for EchoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EchoServiceClient interface {
	Echo(ctx context.Context, in *EchoServiceEchoRequest, opts ...grpc.CallOption) (*EchoServiceEchoResponse, error)
	EchoBody(ctx context.Context, in *EchoServiceEchoBodyRequest, opts ...grpc.CallOption) (*EchoServiceEchoBodyResponse, error)
	EchoHeader(ctx context.Context, in *EchoServiceEchoHeaderRequest, opts ...grpc.CallOption) (*EchoServiceEchoHeaderResponse, error)
	EchoUpload(ctx context.Context, opts ...grpc.CallOption) (EchoService_EchoUploadClient, error)
}

type echoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEchoServiceClient(cc grpc.ClientConnInterface) EchoServiceClient {
	return &echoServiceClient{cc}
}

func (c *echoServiceClient) Echo(ctx context.Context, in *EchoServiceEchoRequest, opts ...grpc.CallOption) (*EchoServiceEchoResponse, error) {
	out := new(EchoServiceEchoResponse)
	err := c.cc.Invoke(ctx, EchoService_Echo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) EchoBody(ctx context.Context, in *EchoServiceEchoBodyRequest, opts ...grpc.CallOption) (*EchoServiceEchoBodyResponse, error) {
	out := new(EchoServiceEchoBodyResponse)
	err := c.cc.Invoke(ctx, EchoService_EchoBody_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) EchoHeader(ctx context.Context, in *EchoServiceEchoHeaderRequest, opts ...grpc.CallOption) (*EchoServiceEchoHeaderResponse, error) {
	out := new(EchoServiceEchoHeaderResponse)
	err := c.cc.Invoke(ctx, EchoService_EchoHeader_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) EchoUpload(ctx context.Context, opts ...grpc.CallOption) (EchoService_EchoUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &EchoService_ServiceDesc.Streams[0], EchoService_EchoUpload_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &echoServiceEchoUploadClient{stream}
	return x, nil
}

type EchoService_EchoUploadClient interface {
	Send(*EchoServiceEchoUploadRequest) error
	CloseAndRecv() (*EchoServiceEchoUploadResponse, error)
	grpc.ClientStream
}

type echoServiceEchoUploadClient struct {
	grpc.ClientStream
}

func (x *echoServiceEchoUploadClient) Send(m *EchoServiceEchoUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoServiceEchoUploadClient) CloseAndRecv() (*EchoServiceEchoUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EchoServiceEchoUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EchoServiceServer is the server API for EchoService service.
// All implementations must embed UnimplementedEchoServiceServer
// for forward compatibility
type EchoServiceServer interface {
	Echo(context.Context, *EchoServiceEchoRequest) (*EchoServiceEchoResponse, error)
	EchoBody(context.Context, *EchoServiceEchoBodyRequest) (*EchoServiceEchoBodyResponse, error)
	EchoHeader(context.Context, *EchoServiceEchoHeaderRequest) (*EchoServiceEchoHeaderResponse, error)
	EchoUpload(EchoService_EchoUploadServer) error
	mustEmbedUnimplementedEchoServiceServer()
}

// UnimplementedEchoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEchoServiceServer struct {
}

func (UnimplementedEchoServiceServer) Echo(context.Context, *EchoServiceEchoRequest) (*EchoServiceEchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedEchoServiceServer) EchoBody(context.Context, *EchoServiceEchoBodyRequest) (*EchoServiceEchoBodyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EchoBody not implemented")
}
func (UnimplementedEchoServiceServer) EchoHeader(context.Context, *EchoServiceEchoHeaderRequest) (*EchoServiceEchoHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EchoHeader not implemented")
}
func (UnimplementedEchoServiceServer) EchoUpload(EchoService_EchoUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method EchoUpload not implemented")
}
func (UnimplementedEchoServiceServer) mustEmbedUnimplementedEchoServiceServer() {}

// UnsafeEchoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EchoServiceServer will
// result in compilation errors.
type UnsafeEchoServiceServer interface {
	mustEmbedUnimplementedEchoServiceServer()
}

func RegisterEchoServiceServer(s grpc.ServiceRegistrar, srv EchoServiceServer) {
	s.RegisterService(&EchoService_ServiceDesc, srv)
}

func _EchoService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoServiceEchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EchoService_Echo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).Echo(ctx, req.(*EchoServiceEchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_EchoBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoServiceEchoBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).EchoBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EchoService_EchoBody_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).EchoBody(ctx, req.(*EchoServiceEchoBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_EchoHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoServiceEchoHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).EchoHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EchoService_EchoHeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).EchoHeader(ctx, req.(*EchoServiceEchoHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_EchoUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServiceServer).EchoUpload(&echoServiceEchoUploadServer{stream})
}

type EchoService_EchoUploadServer interface {
	SendAndClose(*EchoServiceEchoUploadResponse) error
	Recv() (*EchoServiceEchoUploadRequest, error)
	grpc.ServerStream
}

type echoServiceEchoUploadServer struct {
	grpc.ServerStream
}

func (x *echoServiceEchoUploadServer) SendAndClose(m *EchoServiceEchoUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoServiceEchoUploadServer) Recv() (*EchoServiceEchoUploadRequest, error) {
	m := new(EchoServiceEchoUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EchoService_ServiceDesc is the grpc.ServiceDesc for EchoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EchoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nuts.echo.v1.EchoService",
	HandlerType: (*EchoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _EchoService_Echo_Handler,
		},
		{
			MethodName: "EchoBody",
			Handler:    _EchoService_EchoBody_Handler,
		},
		{
			MethodName: "EchoHeader",
			Handler:    _EchoService_EchoHeader_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EchoUpload",
			Handler:       _EchoService_EchoUpload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "nuts/echo/v1/echo.proto",
}
